import jsPDF from 'jspdf'

export interface ReportData {
  title: string
  schoolName: string
  generatedDate: string
  totalStudents?: number
  averageGPA?: string
  topPerformers?: Array<{ name: string; gpa: string; class: string }>
  subjectWisePerformance?: Array<{ subject: string; average: string; passRate: string }>
  totalRevenue?: string
  totalExpenses?: string
  netProfit?: string
  feeCollection?: Array<{ month: string; collected: string; pending: string }>
  salaryExpenses?: string
  operationalExpenses?: string
  maintenanceExpenses?: string
  overallAttendance?: string
  classWiseAttendance?: Array<{ class: string; attendance: string; students: number }>
  monthlyTrend?: Array<{ month: string; attendance: string }>
  totalTeachers?: number
  totalAdministrators?: number
  activeStaff?: number
  departmentWise?: Array<{ department: string; teachers: number }>
  experienceLevels?: Array<{ level: string; count: number }>
}

export const generateAcademicReportPDF = (data: ReportData): void => {
  const doc = new jsPDF()

  // Set font
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(20)
  doc.text('ACADEMIC PERFORMANCE REPORT', 20, 30)

  // School info
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`School: ${data.schoolName}`, 20, 50)
  doc.text(`Generated: ${data.generatedDate}`, 20, 60)

  // Summary statistics
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('SUMMARY STATISTICS', 20, 80)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`Total Students: ${data.totalStudents}`, 20, 95)
  doc.text(`Average GPA: ${data.averageGPA}`, 20, 105)

  // Top performers
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('TOP PERFORMERS', 20, 125)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  let yPos = 140
  data.topPerformers?.forEach((student, index) => {
    doc.text(`${index + 1}. ${student.name} - GPA: ${student.gpa} (${student.class})`, 20, yPos)
    yPos += 10
  })

  // Subject-wise performance
  if (yPos > 250) {
    doc.addPage()
    yPos = 30
  }

  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('SUBJECT-WISE PERFORMANCE', 20, yPos + 10)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  yPos += 25
  data.subjectWisePerformance?.forEach((subject) => {
    doc.text(`${subject.subject}: Average ${subject.average}, Pass Rate ${subject.passRate}`, 20, yPos)
    yPos += 10
  })

  // Footer
  doc.setFont('helvetica', 'italic')
  doc.setFontSize(10)
  doc.text('Generated by School Management System', 20, 280)

  // Save the PDF
  doc.save(`Academic_Report_${new Date().toISOString().split('T')[0]}.pdf`)
}

export const generateFinancialReportPDF = (data: ReportData): void => {
  const doc = new jsPDF()

  // Set font
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(20)
  doc.text('FINANCIAL REPORT', 20, 30)

  // School info
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`School: ${data.schoolName}`, 20, 50)
  doc.text(`Generated: ${data.generatedDate}`, 20, 60)

  // Financial summary
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('FINANCIAL SUMMARY', 20, 80)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`Total Revenue: ${data.totalRevenue}`, 20, 95)
  doc.text(`Total Expenses: ${data.totalExpenses}`, 20, 105)
  doc.text(`Net Profit: ${data.netProfit}`, 20, 115)

  // Monthly fee collection
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('MONTHLY FEE COLLECTION', 20, 135)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  let yPos = 150
  data.feeCollection?.forEach((month) => {
    doc.text(`${month.month}: Collected ${month.collected}, Pending ${month.pending}`, 20, yPos)
    yPos += 10
  })

  // Expense breakdown
  if (yPos > 250) {
    doc.addPage()
    yPos = 30
  }

  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('EXPENSE BREAKDOWN', 20, yPos + 10)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  yPos += 25
  doc.text(`Salary Expenses: ${data.salaryExpenses}`, 20, yPos)
  doc.text(`Operational Expenses: ${data.operationalExpenses}`, 20, yPos + 10)
  doc.text(`Maintenance Expenses: ${data.maintenanceExpenses}`, 20, yPos + 20)

  // Footer
  doc.setFont('helvetica', 'italic')
  doc.setFontSize(10)
  doc.text('Generated by School Management System', 20, 280)

  // Save the PDF
  doc.save(`Financial_Report_${new Date().toISOString().split('T')[0]}.pdf`)
}

export const generateAttendanceReportPDF = (data: ReportData): void => {
  const doc = new jsPDF()

  // Set font
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(20)
  doc.text('ATTENDANCE REPORT', 20, 30)

  // School info
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`School: ${data.schoolName}`, 20, 50)
  doc.text(`Generated: ${data.generatedDate}`, 20, 60)

  // Overall attendance
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('OVERALL ATTENDANCE', 20, 80)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`Average Attendance Rate: ${data.overallAttendance}`, 20, 95)

  // Class-wise attendance
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('CLASS-WISE ATTENDANCE', 20, 115)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  let yPos = 130
  data.classWiseAttendance?.forEach((cls) => {
    doc.text(`${cls.class}: ${cls.attendance} (${cls.students} students)`, 20, yPos)
    yPos += 10
  })

  // Monthly trend
  if (yPos > 250) {
    doc.addPage()
    yPos = 30
  }

  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('MONTHLY TREND', 20, yPos + 10)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  yPos += 25
  data.monthlyTrend?.forEach((month) => {
    doc.text(`${month.month}: ${month.attendance}`, 20, yPos)
    yPos += 10
  })

  // Footer
  doc.setFont('helvetica', 'italic')
  doc.setFontSize(10)
  doc.text('Generated by School Management System', 20, 280)

  // Save the PDF
  doc.save(`Attendance_Report_${new Date().toISOString().split('T')[0]}.pdf`)
}

export const generateStaffReportPDF = (data: ReportData): void => {
  const doc = new jsPDF()

  // Set font
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(20)
  doc.text('STAFF REPORT', 20, 30)

  // School info
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`School: ${data.schoolName}`, 20, 50)
  doc.text(`Generated: ${data.generatedDate}`, 20, 60)

  // Staff statistics
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('STAFF STATISTICS', 20, 80)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  doc.text(`Total Teachers: ${data.totalTeachers}`, 20, 95)
  doc.text(`Total Administrators: ${data.totalAdministrators}`, 20, 105)
  doc.text(`Active Staff: ${data.activeStaff}`, 20, 115)

  // Department-wise distribution
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('DEPARTMENT-WISE DISTRIBUTION', 20, 135)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  let yPos = 150
  data.departmentWise?.forEach((dept) => {
    doc.text(`${dept.department}: ${dept.teachers} teachers`, 20, yPos)
    yPos += 10
  })

  // Experience levels
  if (yPos > 250) {
    doc.addPage()
    yPos = 30
  }

  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  doc.text('EXPERIENCE LEVELS', 20, yPos + 10)

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(12)
  yPos += 25
  data.experienceLevels?.forEach((level) => {
    doc.text(`${level.level}: ${level.count} staff members`, 20, yPos)
    yPos += 10
  })

  // Footer
  doc.setFont('helvetica', 'italic')
  doc.setFontSize(10)
  doc.text('Generated by School Management System', 20, 280)

  // Save the PDF
  doc.save(`Staff_Report_${new Date().toISOString().split('T')[0]}.pdf`)
}